// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "goshop/internal/cart/dto"

	mock "github.com/stretchr/testify/mock"

	model "goshop/internal/cart/model"
)

// ICartService is an autogenerated mock type for the ICartService type
type ICartService struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, req
func (_m *ICartService) AddProduct(ctx context.Context, req *dto.AddProductReq) (*model.Cart, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AddProductReq) (*model.Cart, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AddProductReq) *model.Cart); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.AddProductReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCartByUserID provides a mock function with given fields: ctx, userID
func (_m *ICartService) GetCartByUserID(ctx context.Context, userID string) (*model.Cart, error) {
	ret := _m.Called(ctx, userID)

	var r0 *model.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Cart, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Cart); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveProduct provides a mock function with given fields: ctx, req
func (_m *ICartService) RemoveProduct(ctx context.Context, req *dto.RemoveProductReq) (*model.Cart, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RemoveProductReq) (*model.Cart, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RemoveProductReq) *model.Cart); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.RemoveProductReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICartService creates a new instance of ICartService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICartService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICartService {
	mock := &ICartService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
