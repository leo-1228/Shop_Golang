// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "goshop/internal/product/dto"

	mock "github.com/stretchr/testify/mock"

	model "goshop/internal/product/model"

	paging "goshop/pkg/paging"
)

// IProductService is an autogenerated mock type for the IProductService type
type IProductService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *IProductService) Create(ctx context.Context, req *dto.CreateProductReq) (*model.Product, error) {
	ret := _m.Called(ctx, req)

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateProductReq) (*model.Product, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateProductReq) *model.Product); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateProductReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *IProductService) GetProductByID(ctx context.Context, id string) (*model.Product, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProducts provides a mock function with given fields: c, req
func (_m *IProductService) ListProducts(c context.Context, req *dto.ListProductReq) ([]*model.Product, *paging.Pagination, error) {
	ret := _m.Called(c, req)

	var r0 []*model.Product
	var r1 *paging.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListProductReq) ([]*model.Product, *paging.Pagination, error)); ok {
		return rf(c, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.ListProductReq) []*model.Product); ok {
		r0 = rf(c, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.ListProductReq) *paging.Pagination); ok {
		r1 = rf(c, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*paging.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dto.ListProductReq) error); ok {
		r2 = rf(c, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: ctx, id, req
func (_m *IProductService) Update(ctx context.Context, id string, req *dto.UpdateProductReq) (*model.Product, error) {
	ret := _m.Called(ctx, id, req)

	var r0 *model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dto.UpdateProductReq) (*model.Product, error)); ok {
		return rf(ctx, id, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *dto.UpdateProductReq) *model.Product); ok {
		r0 = rf(ctx, id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *dto.UpdateProductReq) error); ok {
		r1 = rf(ctx, id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIProductService creates a new instance of IProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IProductService {
	mock := &IProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
